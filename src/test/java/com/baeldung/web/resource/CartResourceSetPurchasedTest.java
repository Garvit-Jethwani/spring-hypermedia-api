// ********RoostGPT********
/*
Test generated by RoostGPT for test springboot-hypermedia using AI Type Claude AI and AI Model claude-3-opus-20240229

ROOST_METHOD_HASH=setPurchased_389dba5f8a
ROOST_METHOD_SIG_HASH=setPurchased_f4189115c3

Here are the JUnit test scenarios for the provided setPurchased method:

Scenario 1: Set Purchased Status to True

Details:
  TestName: setPurchasedToTrue()
  Description: This test verifies that the setPurchased method correctly sets the purchased status to true when invoked with the argument true.
Execution:
  Arrange: Create an instance of the class containing the setPurchased method.
  Act: Invoke the setPurchased method with the argument true.
  Assert: Use assertTrue to check if the purchased status is set to true after invoking the method.
Validation:
  The assertion verifies that the setPurchased method correctly updates the purchased status to true when provided with the appropriate argument.
  This test ensures that the method behaves as expected and accurately reflects the purchased status of an item or resource.

Scenario 2: Set Purchased Status to False

Details:
  TestName: setPurchasedToFalse()
  Description: This test verifies that the setPurchased method correctly sets the purchased status to false when invoked with the argument false.
Execution:
  Arrange: Create an instance of the class containing the setPurchased method.
  Act: Invoke the setPurchased method with the argument false.
  Assert: Use assertFalse to check if the purchased status is set to false after invoking the method.
Validation:
  The assertion verifies that the setPurchased method correctly updates the purchased status to false when provided with the appropriate argument.
  This test ensures that the method behaves as expected and accurately reflects the non-purchased status of an item or resource.

Scenario 3: Verify Purchased Status Change

Details:
  TestName: setPurchasedStatusChange()
  Description: This test verifies that the setPurchased method correctly changes the purchased status from its initial value to a different value when invoked.
Execution:
  Arrange: Create an instance of the class containing the setPurchased method and set an initial purchased status.
  Act: Invoke the setPurchased method with an argument that is different from the initial purchased status.
  Assert: Use assertEquals to check if the purchased status is updated to the expected value after invoking the method.
Validation:
  The assertion verifies that the setPurchased method correctly changes the purchased status from its initial value to the provided argument value.
  This test ensures that the method is capable of updating the purchased status as required and reflects the changes accurately.

Scenario 4: Verify Purchased Status Remains Unchanged

Details:
  TestName: setPurchasedStatusUnchanged()
  Description: This test verifies that the setPurchased method does not change the purchased status when invoked with the same value as the current status.
Execution:
  Arrange: Create an instance of the class containing the setPurchased method and set an initial purchased status.
  Act: Invoke the setPurchased method with an argument that is the same as the current purchased status.
  Assert: Use assertEquals to check if the purchased status remains unchanged after invoking the method.
Validation:
  The assertion verifies that the setPurchased method does not unnecessarily update the purchased status when provided with the same value as the current status.
  This test ensures that the method behaves efficiently and avoids unnecessary updates when the purchased status is already set to the desired value.

These test scenarios cover the basic functionality of the setPurchased method, including setting the purchased status to true and false, verifying changes in the purchased status, and ensuring that the status remains unchanged when set to the same value. They aim to validate the correctness and expected behavior of the method in different scenarios.
*/

// ********RoostGPT********
package com.baeldung.web.resource;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import com.baeldung.model.Book;

public class CartResourceSetPurchasedTest {

    private CartResource cartResource;

    @Before
    public void setUp() {
        cartResource = new CartResource(new ArrayList<Book>(), false);
    }

    @Test
    public void testSetPurchasedToTrue() {
        // Arrange
        // Act
        cartResource.setPurchased(true);
        // Assert
        assertTrue(cartResource.isPurchased());
    }

    @Test
    public void testSetPurchasedToFalse() {
        // Arrange
        // Act
        cartResource.setPurchased(false);
        // Assert
        assertFalse(cartResource.isPurchased());
    }

    @Test
    public void testSetPurchasedStatusChange() {
        // Arrange
        cartResource.setPurchased(true);
        // Act
        cartResource.setPurchased(false);
        // Assert
        assertFalse(cartResource.isPurchased());
    }

    @Test
    public void testSetPurchasedStatusUnchanged() {
        // Arrange
        cartResource.setPurchased(false);
        // Act
        cartResource.setPurchased(false);
        // Assert
        assertFalse(cartResource.isPurchased());
    }
}
